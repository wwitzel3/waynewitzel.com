<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Tdd on occasional posts about technology </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://localhost:1313/categories/tdd/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Book: Test Driven Development by Example (Refresher)</title>
      <link>http://localhost:1313/tdd-by-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/tdd-by-example/</guid>
      <description>&lt;p&gt;I found an old book on the shelf the other day. One I hadn&amp;rsquo;t worked through in some time. &amp;ldquo;Test Driven Development By Example&amp;rdquo; by Kent Beck. It was one of the first books I had ever picked up and read about test driven development and really kicked off my shift in towards TDD and other agile practices.&lt;/p&gt;

&lt;p&gt;So with this nostalgia, I decided I&amp;rsquo;ll grab the book and work through it once again. Cover to cover, as my ode to the first book that radically changed how I felt and thought about programming in a long time and as a refresher course for the real basics of TDD, since I notice myself falling in to some poor patterns at work.&lt;/p&gt;

&lt;p&gt;One thing that stood out to me right away and this goes back to what I had mentioned earlier about some poor patterns at work. I had pretty much completely forgotten about how/when/why to triangulate. I am not a giant fan of it over all, but when dealing with very complex systems and your brain just won&amp;rsquo;t give you the obvious implementation and there is no static value to make a test pass. Triangulation really shines in this instance and right after reading the chapter that covered it, I opened the VPN and got a requirement crossed of my list by triangulating with my test case.&lt;/p&gt;

&lt;p&gt;For those not familiar with the practices within TDD, the break down is simple. Tests first, write passing code as fast as possible, refactor code. With triangulation, you use your test to drive the how a method or class develops. With triangulation you don&amp;rsquo;t change your exist tests, you just add new requirements to them. We&amp;rsquo;ll you a very simple example of a Number class.&lt;/p&gt;

&lt;p&gt;[sourcecode language=&amp;lsquo;python&amp;rsquo;]
def test_Equality():
 assert Number(10) == Number(10)
[/sourcecode]&lt;/p&gt;

&lt;p&gt;That might be your first test. Very easy to make pass. Just have Number constructor return 10. Green light, go home. So imagine this like some complex class we are trying to add this functionality on to. Here is how you&amp;rsquo;d modify the test to begin the triangulation process.&lt;/p&gt;

&lt;p&gt;[sourcecode language=&amp;lsquo;python&amp;rsquo;]
def test_Equality():
 assert Numer(10) == Number(10)
 assert Number(10) != Number(15)
[/sourcecode]&lt;/p&gt;

&lt;p&gt;You see? Now, returning 10 won&amp;rsquo;t work. So now you&amp;rsquo;ve got another very small piece to implement. You continue to do this in very small pieces until you have a eureka moment and begin to see the obvious solutions as you make more tests or until you&amp;rsquo;ve taken 1000 baby steps and built the whole class.&lt;/p&gt;

&lt;p&gt;Anyway, I&amp;rsquo;ve worked through the first serveral chapaters so far. I&amp;rsquo;ll have a link to the TDD source once my repository is back online.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book: The Art of Unit Testing</title>
      <link>http://localhost:1313/art-of-unit-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/art-of-unit-testing/</guid>
      <description>&lt;p&gt;This is a short review of the first chapter of&lt;a class=&#34;ext-link&#34; href=&#34;http://www.manning.com/osherove/&#34;&gt;&lt;span class=&#34;icon&#34;&gt;The Art of Unit Testing&lt;/span&gt;&lt;/a&gt;. Which is available for free.&lt;/p&gt;

&lt;p&gt;The chapter is short and concise. It is a good warm up for what the reader is to expect in the coming chapters.&lt;/p&gt;

&lt;p&gt;The initial fail project that is talked about is covered in very brief. It touches on some reasons why it failed, things like unmaintainable unit tests, but it almost seems as if the project itself confused functional tests with unit tests, which I guess would be a reason to author a book about good unit tests and what a unit test is and is not.&lt;/p&gt;

&lt;p&gt;It has a great definition of what a good unit test is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DEFINITION: A GOOD UNIT TEST&lt;/strong&gt;
&lt;em&gt;A unit test is an automated piece of code that invokes a different method and then checks some assumptions about the logical behavior of that method or class under test.&lt;/em&gt;
&lt;em&gt;A unit test is written using a unit testing framework. It can be written easily and runs quickly. It can be executed, repeatedly, by anyone on the development team.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I found this to be a very good definition and plan to adopt it when I am asked this question. In fact, I&amp;rsquo;m going to add it to my wiki.&lt;a class=&#34;wiki&#34; href=&#34;http://blog.pieceofpy.com/wiki/UnitTest&#34;&gt;UnitTest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The author also touches on TDD in the very first chapter, which I was surprised, and delighted to see. His coverage is very basic, much like you&amp;rsquo;ll find in my&lt;a href=&#34;http://blog.pieceofpy.com/blog/intro-to-tdd&#34;&gt;Introduction to TDD&lt;/a&gt;series on this blog. The author dedicates the unreleased chapter 12 to this subject. Looking forward to it.&lt;/p&gt;

&lt;p&gt;Overall, the first chapter has inspired me to purchase the early release digital edition of the book. So expect a full review shortly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jython 2.5 and snakefight for deploying Pylons w/ SQLAlchemy &#43; Oracle.</title>
      <link>http://localhost:1313/jython-snakefight-pylons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/jython-snakefight-pylons/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;UPDATE / 13 March 2009: &lt;/strong&gt;&lt;a href=&#34;http://pypi.python.org/pypi/snakefight&#34;&gt;snakefight 0.3&lt;/a&gt; now has a &amp;ndash;include-jar option, prefer that to using my hack.&lt;/p&gt;

&lt;p&gt;After reading &lt;a href=&#34;http://dunderboss.blogspot.com/2009/03/deploying-pylons-apps-to-java-servlet.html&#34;&gt;P. Jenvey&amp;rsquo;s blog post about Deploying Pylons Apps to Java Servlet Containers&lt;/a&gt; I immediately downloaded the Jython 2.5 beta and installed snakefight to give it a try. One of our services where I work is a Pylons based application. It is deployed using paster and Apache ProxyPass. Our main application is written in Java and is deployed as a war under Jetty. So if I can get my Pylons application built as a war and deployed that way, it would greatly simplify our deployment process.&lt;/p&gt;

&lt;p&gt;[sourcecode language=&amp;ldquo;bash&amp;rdquo;]
$ sudo /opt/jython25/bin/easy_install snakefight
$ /opt/jython25/bin/jython setup.py develop
$ /opt/jython25/bin/jython setup.py bdist_war &amp;ndash;paster-config dev_r2.ini
&amp;hellip; output of success and stuff &amp;hellip;
$ cp dist/project-0.6.8dev.war /opt/jetty/webapps
[/sourcecode]&lt;/p&gt;

&lt;p&gt;Now I visit my local server and hit the project context. I get some database errors, kind of expected them. So for the time being, I&amp;rsquo;ll be running this directly using Jython to speed up the debugging process. A quick googling of my DB issues turns up &lt;a href=&#34;http://pylonshq.com/pasties/77c3184b14d6936d86d13e4e65df92d2&#34;&gt;zxoracle for SQLalchemy&lt;/a&gt; which uses Jython zxJDBC. I install that in to sqlalchemy/databases as zxoracle.py and give it another go. Changing the oracle:// lines in my .ini file to now read zxoracle:// Now it can&amp;rsquo;t find the 3rd party Oracle libraries (ojdbc.jar).&lt;/p&gt;

&lt;p&gt;[sourcecode]
$ cd ./dist
$ jar xf project-0.6.8dev.war
$ cd WEB-INF/lib
$ ls&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;no ojdbc.jar as expected &amp;hellip;&lt;/h1&gt;

&lt;p&gt;$ cd ~/project
$ export CLASSPATH=/opt/jython25/jython.jar:/usr/lib/jvm/java/jre/lib/ext/ojdbc.jar
$ /opt/jython25/bin/jython /opt/jython25/bin/paster serve &amp;ndash;reload dev_r2.ini
[/sourcecode]&lt;/p&gt;

&lt;p&gt;Now it is looking a little better and it able to find the jar, but still a DB issue, now with SQLalchemy library. Not having a ton of time to investigate, I decide to try rolling back my SQAlachemy version for Jython. Turns out rolling back to 0.5.0 fixed the issue. I&amp;rsquo;ll be investigating why it was breaking with 0.5.2 soon &amp;trade;. So now I rerun it, and get a new error.&lt;/p&gt;

&lt;p&gt;[sourcecode lang=&amp;ldquo;bash&amp;rdquo;]
AttributeError: &amp;lsquo;ZXOracleDialect&amp;rsquo; object has no attribute &amp;lsquo;optimize_limits&amp;rsquo;
[/sourcecode]&lt;/p&gt;

&lt;p&gt;I decide I am just going to go in to the &lt;a href=&#34;http://trac.pieceofpy.com/pieceofpy/browser/snakefight-java-libs&#34;&gt;zxoracle.py and add optimize_limits = False to the ZXOracleDialect&lt;/a&gt;. No idea what this breaks or harms, but I do it anyway and rerun the application. Success! Every thing is working now. No liking the idea of having to manually insert the Oracle jar in to the WEB-INF/lib and not really wanting to much around with environment variables, I also implemented a quick and dirty include-java-libs for snakefight, the diff for command.py is below. This allows me to pass in a : separated list of jars to include in the WEB-INF/lib. &lt;strong&gt;EDIT: &lt;/strong&gt;The diff I posted isn&amp;rsquo;t needed since I put it on my hg repo. &lt;a href=&#34;http://trac.pieceofpy.com/pieceofpy/browser/snakefight-java-libs&#34;&gt;You can grab it from here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now I am back to building my war. Just as before.
[sourcecode lang=&amp;ldquo;bash&amp;rdquo;]
$ /opt/jython25/bin/jython setup.py bdist_war &amp;ndash;paste-config dev_r2.ini &amp;ndash;include-java-libs /opt/jython25/extlibs/ojdbc.jar
running bdist_war
creating build/bdist.java1.6.0_12
creating build/bdist.java1.6.0_12/war
creating build/bdist.java1.6.0_12/war/WEB-INF
creating build/bdist.java1.6.0_12/war/WEB-INF/lib-python
running easy_install project
adding eggs (to WEB-INF/lib-python)
adding jars (to WEB-INF/lib)
adding WEB-INF/lib/jython.jar
adding Paste ini file (to dev_r2.ini)
adding Paste app loader (to WEB-INF/lib-python/____loadapp.py)
generating deployment descriptor
adding deployment descriptor (WEB-INF/web.xml)
created dist/project-0.6.8dev-py2.5.war
$ cp dist/project-0.6.8dev-py2.5.war /opt/jetty/webapps
$ sudo /sbin/service jetty restart
[/sourcecode]&lt;/p&gt;

&lt;p&gt;And presto! I am in business. My pylons application is deployed under Jetty and all the &lt;a href=&#34;http://seleniumhq.org/&#34;&gt;selenium functional tests&lt;/a&gt; are passing. I am sure there is probably a easier, neater, or cleaner way to do all this, but this was my first iteration through and also my first time ever deploying a WAR to a java servlet container so all in all I am happy with the results. Performance seems about the same as when running the application with paster serve, but Jetty does use a little more memory than before (expected I guess).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sucker for the green. Python GUI Green-Bar?</title>
      <link>http://localhost:1313/python-red-green-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/python-red-green-testing/</guid>
      <description>&lt;p&gt;I get made fun of on a daily basis for this but I am addicted to GUI Green-Bar testing. When I say that I literally mean a simple little Green/Red progress bar that shows me my pass/fail tests. I am addicted to it. I need it. Eclipse C++ and CUTE had spoiled me and now I desire the same thing for Python. Don&amp;rsquo;t get me wrong, I don&amp;rsquo;t practice &amp;ldquo;&lt;a href=&#34;http://www.adam-bien.com/roller/abien/entry/quality_assurance_driven_development_and&#34;&gt;metrics driven development&lt;/a&gt;&amp;rdquo;, but for me personally, it is a motivator, an easy and clearly defined goal in my test driven approach, make that bar go full green.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve spent the last few hours on Google and misc blogs looking for GUI Green bar testing for modern Python and have been unsuccessful in finding anything. So I ask anyone who happens to read this blog if you know of any plugins for any IDEs or text editors that support this for Python.&lt;/p&gt;

&lt;p&gt;In the mean time I started my first Eclipse plugin project ever in hopes I can hack my through enough Java and pull enough from PyDev extension that I can make a simple green bar for Eclipse that parses nosetests output or something.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What is test driven development?</title>
      <link>http://localhost:1313/what-is-tdd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/what-is-tdd/</guid>
      <description>&lt;p&gt;Was having a conversation at the office today about TDD. Talking about TDD with some of my co-workers who still develop in a more traditional manner motivated me to write an introduction to TDD for them. I know, I know, there are plenty on the web, but this little write up serves two purposes. One, help my co-workers who aren&amp;rdquo;t familiar with some of the TDD ways learn how and why we (the TDD collective) develop the way we do. Two, the more you talk about write about a topic, the better you get at that topic.&lt;/p&gt;

&lt;p&gt;TDD goes something like this.
&lt;ul&gt;
    &lt;li&gt;Write a failing test.&lt;/li&gt;
    &lt;li&gt;Make the test pass as fast as possible.&lt;/li&gt;
    &lt;li&gt;Refactor existing or add new tests.&lt;/li&gt;
    &lt;li&gt;Make those new/refactored tests pass.&lt;/li&gt;
&lt;/ul&gt;
That is TDD at is simplest level. I&amp;rdquo;ll cover each of these bullets with a paragraph or two and code examples so you can see how TDD drives the implementation.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>