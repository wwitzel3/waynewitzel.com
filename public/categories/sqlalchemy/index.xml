<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Sqlalchemy on occasional posts about technology </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://localhost:1313/categories/sqlalchemy/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Jython 2.5 and snakefight for deploying Pylons w/ SQLAlchemy &#43; Oracle.</title>
      <link>http://localhost:1313/jython-snakefight-pylons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/jython-snakefight-pylons/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;UPDATE / 13 March 2009: &lt;/strong&gt;&lt;a href=&#34;http://pypi.python.org/pypi/snakefight&#34;&gt;snakefight 0.3&lt;/a&gt; now has a &amp;ndash;include-jar option, prefer that to using my hack.&lt;/p&gt;

&lt;p&gt;After reading &lt;a href=&#34;http://dunderboss.blogspot.com/2009/03/deploying-pylons-apps-to-java-servlet.html&#34;&gt;P. Jenvey&amp;rsquo;s blog post about Deploying Pylons Apps to Java Servlet Containers&lt;/a&gt; I immediately downloaded the Jython 2.5 beta and installed snakefight to give it a try. One of our services where I work is a Pylons based application. It is deployed using paster and Apache ProxyPass. Our main application is written in Java and is deployed as a war under Jetty. So if I can get my Pylons application built as a war and deployed that way, it would greatly simplify our deployment process.&lt;/p&gt;

&lt;p&gt;[sourcecode language=&amp;ldquo;bash&amp;rdquo;]
$ sudo /opt/jython25/bin/easy_install snakefight
$ /opt/jython25/bin/jython setup.py develop
$ /opt/jython25/bin/jython setup.py bdist_war &amp;ndash;paster-config dev_r2.ini
&amp;hellip; output of success and stuff &amp;hellip;
$ cp dist/project-0.6.8dev.war /opt/jetty/webapps
[/sourcecode]&lt;/p&gt;

&lt;p&gt;Now I visit my local server and hit the project context. I get some database errors, kind of expected them. So for the time being, I&amp;rsquo;ll be running this directly using Jython to speed up the debugging process. A quick googling of my DB issues turns up &lt;a href=&#34;http://pylonshq.com/pasties/77c3184b14d6936d86d13e4e65df92d2&#34;&gt;zxoracle for SQLalchemy&lt;/a&gt; which uses Jython zxJDBC. I install that in to sqlalchemy/databases as zxoracle.py and give it another go. Changing the oracle:// lines in my .ini file to now read zxoracle:// Now it can&amp;rsquo;t find the 3rd party Oracle libraries (ojdbc.jar).&lt;/p&gt;

&lt;p&gt;[sourcecode]
$ cd ./dist
$ jar xf project-0.6.8dev.war
$ cd WEB-INF/lib
$ ls&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;no ojdbc.jar as expected &amp;hellip;&lt;/h1&gt;

&lt;p&gt;$ cd ~/project
$ export CLASSPATH=/opt/jython25/jython.jar:/usr/lib/jvm/java/jre/lib/ext/ojdbc.jar
$ /opt/jython25/bin/jython /opt/jython25/bin/paster serve &amp;ndash;reload dev_r2.ini
[/sourcecode]&lt;/p&gt;

&lt;p&gt;Now it is looking a little better and it able to find the jar, but still a DB issue, now with SQLalchemy library. Not having a ton of time to investigate, I decide to try rolling back my SQAlachemy version for Jython. Turns out rolling back to 0.5.0 fixed the issue. I&amp;rsquo;ll be investigating why it was breaking with 0.5.2 soon &amp;trade;. So now I rerun it, and get a new error.&lt;/p&gt;

&lt;p&gt;[sourcecode lang=&amp;ldquo;bash&amp;rdquo;]
AttributeError: &amp;lsquo;ZXOracleDialect&amp;rsquo; object has no attribute &amp;lsquo;optimize_limits&amp;rsquo;
[/sourcecode]&lt;/p&gt;

&lt;p&gt;I decide I am just going to go in to the &lt;a href=&#34;http://trac.pieceofpy.com/pieceofpy/browser/snakefight-java-libs&#34;&gt;zxoracle.py and add optimize_limits = False to the ZXOracleDialect&lt;/a&gt;. No idea what this breaks or harms, but I do it anyway and rerun the application. Success! Every thing is working now. No liking the idea of having to manually insert the Oracle jar in to the WEB-INF/lib and not really wanting to much around with environment variables, I also implemented a quick and dirty include-java-libs for snakefight, the diff for command.py is below. This allows me to pass in a : separated list of jars to include in the WEB-INF/lib. &lt;strong&gt;EDIT: &lt;/strong&gt;The diff I posted isn&amp;rsquo;t needed since I put it on my hg repo. &lt;a href=&#34;http://trac.pieceofpy.com/pieceofpy/browser/snakefight-java-libs&#34;&gt;You can grab it from here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now I am back to building my war. Just as before.
[sourcecode lang=&amp;ldquo;bash&amp;rdquo;]
$ /opt/jython25/bin/jython setup.py bdist_war &amp;ndash;paste-config dev_r2.ini &amp;ndash;include-java-libs /opt/jython25/extlibs/ojdbc.jar
running bdist_war
creating build/bdist.java1.6.0_12
creating build/bdist.java1.6.0_12/war
creating build/bdist.java1.6.0_12/war/WEB-INF
creating build/bdist.java1.6.0_12/war/WEB-INF/lib-python
running easy_install project
adding eggs (to WEB-INF/lib-python)
adding jars (to WEB-INF/lib)
adding WEB-INF/lib/jython.jar
adding Paste ini file (to dev_r2.ini)
adding Paste app loader (to WEB-INF/lib-python/____loadapp.py)
generating deployment descriptor
adding deployment descriptor (WEB-INF/web.xml)
created dist/project-0.6.8dev-py2.5.war
$ cp dist/project-0.6.8dev-py2.5.war /opt/jetty/webapps
$ sudo /sbin/service jetty restart
[/sourcecode]&lt;/p&gt;

&lt;p&gt;And presto! I am in business. My pylons application is deployed under Jetty and all the &lt;a href=&#34;http://seleniumhq.org/&#34;&gt;selenium functional tests&lt;/a&gt; are passing. I am sure there is probably a easier, neater, or cleaner way to do all this, but this was my first iteration through and also my first time ever deploying a WAR to a java servlet container so all in all I am happy with the results. Performance seems about the same as when running the application with paster serve, but Jetty does use a little more memory than before (expected I guess).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SQLalchemy Cleanup Challenge</title>
      <link>http://localhost:1313/sqlalchemy-cleanup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/sqlalchemy-cleanup/</guid>
      <description>&lt;p&gt;Yesterday I found myself writing some very interesting SQLalchemy. The problem is I have a date column in
PostgreSQL that is stored as epoch time, so it is just an Interger column. I need to group by year,month and
grab the total count of status=&amp;lsquo;A&amp;rsquo; groups for that year,month combination.&lt;/p&gt;

&lt;p&gt;Here is what I came up with, can you make it cleaner? Faster? I am curious to see the different variations
people come up with.&lt;/p&gt;

&lt;pre class=&#34;brush: py&#34;&gt;
        pg_date_part_month = sa.func.date_part(&#39;month&#39;,
                sa.func.to_timestamp(Group.register_time))
        pg_date_part_year = sa.func.date_part(&#39;year&#39;,
                sa.func.to_timestamp(Group.register_time))

        group_month_select = ( 
            db.query(
                sa.sql.label(&#39;year&#39;, pg_date_part_year),
                sa.sql.label(&#39;month&#39;, pg_date_part_month),
                sa.sql.label(&#39;total&#39;, sa.func.count(Group.status))
            )   
            .filter_by(status=&#39;A&#39;)
            .group_by(pg_date_part_year)
            .group_by(pg_date_part_month)
            .group_by(Group.status)
            .order_by(pg_date_part_year)
            .order_by(pg_date_part_month)
        )
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SQLalchemy and JSON w/ Pylons - Best Practices</title>
      <link>http://localhost:1313/sqlalchemy-pylons-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/sqlalchemy-pylons-best-practices/</guid>
      <description>

&lt;p&gt;I asked the question I Stackoverflow and maybe it was too generic for the site, since it just got trolled with &amp;ldquo;Google keyword&amp;rdquo; by some d-bag. So I deleted it and figured I&amp;rsquo;d throw it up on my blog a see about getting some feedback from the people who read this pile about. The reason I ask this is mainly because I am preparing to do some updated screencasts for Pylons.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve seen multiple ways referenced in official docs and I have done it a few different ways myself. I am using Pylons and I am curious what the best practices are for this common scenario?&lt;/p&gt;

&lt;p&gt;I have used something similar to this for auto-magically making the conversion happen.
&lt;pre class=&#34;brush: py&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;The auto-magic version&lt;/h1&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;I pulled this off a blog, forget the source.&lt;/h1&gt;

&lt;p&gt;def _sa_to_dict(obj):
    for item in obj.&lt;strong&gt;dict&lt;/strong&gt;.items():
        if item[0][0] is &amp;lsquo;_&amp;rsquo;:
            continue
        if isinstance(item[1], str):
            yield [item[0], item[1].decode()]
        else:
            yield item&lt;/p&gt;

&lt;p&gt;def json(obj):
    if isinstance(obj, list):
        return dumps(map(dict, map(_sa_to_dict, obj)))
    else:
        return dumps(dict(_sa_to_dict(obj)))&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;here is the controller&lt;/h1&gt;

&lt;p&gt;@jsonify
def index(self, format=&amp;lsquo;html&amp;rsquo;):
    templates = Session.query(Template).all()
    if format == &amp;lsquo;json&amp;rsquo;:
        return json(templates)
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;I have also done the version where you use the jsonify decorator and build your dictionary manually, something like this, which is ok if I need to define some custom behavior for my JSON, but as the default behavior seems excessive.&lt;/p&gt;

&lt;pre class=&#34;brush: py&#34;&gt;
@jsonify
def index(self, format=&#39;html&#39;):
    if format == &#39;json&#39;:
        q = Session.query
        templates = [{&#39;id&#39;: t.id,
                      &#39;title&#39;: t.title,
                      &#39;body&#39;: t.body} for t in q(Template)]
        return templates
&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve also created an inherited SA class which defines a json method and have used that on all my objects to convert them to JSON. Similar to the the fedora extensions.&lt;/p&gt;

&lt;p&gt;Maybe I missed some obviously library out there or some obvious helper in the Pylons packages, but I feel like this is a very common task being done a dozen different ways between docs, source, and my own personal projects. Curious what others are doing / using.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tags with SQLalchemy</title>
      <link>http://localhost:1313/sqlalchemy-tags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/sqlalchemy-tags/</guid>
      <description>&lt;p&gt;You see lots of examples on the net for SQLalchemy. Implementing a blog, implementing a wiki, even other articles on implementing tags. Some are good, some are pretty poor, and some are just plain out of date. After some researching on best practices for implementing a Tag system with SQLalchemy I&amp;rsquo;ve come up with the solution you are about to read.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve pulled these examples from real world production code. Just renamed them and shortened them up a little for the blog post. I pulled the naming convention right from SimpleSite example for Pylons. Here is the the table layout. Simple. A page, tag, and relation table.&lt;/p&gt;

&lt;p&gt;
&lt;pre class=&#34;brush: py&#34;&gt;
page_table = sa.Table(&#34;page&#34;, meta.metadata,
    sa.Column(&#34;id&#34;, sa.types.Integer, sa.schema.Sequence(&#39;page_seq_id&#39;, optional=True), primary_key=True),
    sa.Column(&#34;name&#34;, sa.types.Unicode(100), nullable=False),
)

tag_table = sa.Table(&#34;tag&#34;, meta.metadata,
    sa.Column(&#34;id&#34;, sa.types.Integer, sa.schema.Sequence(&#39;taq_seq_id&#39;, optional=True), primary_key=True),
    sa.Column(&#34;name&#34;, sa.types.Unicode(50), nullable=False, unique=True),
)

pagetag_table = sa.Table(&#34;pagetag&#34;, meta.metadata,
    sa.Column(&#34;id&#34;, sa.types.Integer, sa.schema.Sequence(&#39;pagetag_seq_id&#39;, optional=True), primary_key=True),
    sa.Column(&#34;pageid&#34;, sa.types.Integer, sa.schema.ForeignKey(&#39;page.id&#39;)),
    sa.Column(&#34;tagid&#34;, sa.types.Integer, sa.schema.ForeignKey(&#39;tag.id&#39;)),
)
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;Now the important part, the mapper. The mapper is what is going to tell sqlalchemy what you are trying to do and how to handle and relate those ForeignKeys. It does the heavy lifting so you don&amp;rsquo;t have to.&lt;/p&gt;

&lt;p&gt;
&lt;pre class=&#34;brush: py&#34;&gt;
class Tag(object):
    pass
    
class Page(object):
    pass

orm.mapper(Tag, tag_table)
orm.mapper(Page, page_table, properties = {
    &#39;tags&#39;:orm.relation(Tag, secondary=pagetag_table, cascade=&#34;all,delete-orphan&#34;),
})
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;This does two things. It setups the relationship and also uses the built-in cascade rule from SQLalchemy to ensure that no orphan tags are left in the database.&lt;/p&gt;

&lt;p&gt;So now we can use this model setup like so. Here, I&amp;rsquo;ve just started up my paster shell so I could work through some quick usage examples.&lt;/p&gt;

&lt;p&gt;
&lt;pre class=&#34;brush: py&#34;&gt;
page = model.Page()
page.name = &#34;Example Page&#34;

tag = model.Tag()
name = &#34;tag&#34;

page.tags.append(tag)
meta.Session.save(page)
meta.Session.commit()

tag_q = meta.Session.query(model.Tag)
tags = tag_q.all()
len(tags)

# filter pages by tag(s)
page_q = meta.Session.query(model.Page)
pages = page_q.join(&#39;tags&#39;).filter_by(name=&#34;tag&#34;).all()

# delete-orphans does the work for us here...
meta.Session.delete(pages[0])
meta.Session.commit()

tags = tag_q.all()
len(tags)

# tag cloud anyone?
# see the source code linked below for a properly weighted tag cloud.
tag_q = meta.Session.query(func.count(&#34;*&#34;).label(&#34;tagcount&#34;), model.Tag)
tag_r = tag_q.filter(model.Tag.id==model.pagetag_table.c.tagid).group_by(model.Tag.id).all()

# what about pages with related tags?
page_q = meta.Session.query(model.Page)

taglist = [&#34;tag1&#34;, &#34;tag2&#34;]
tagcount = len(taglist)
page_q.join(model.Page.tags).filter(model.Tag.name.in_(taglist)).\
group_by(model.Page.id).having(func.count(model.Page.id) == tagcount).all()
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;Ok, now the fun part, what about all related tags? An intersection between an arbitrary number of many-to-many relationships? For that I added a static method to my tag class. Something like this.&lt;/p&gt;

&lt;p&gt;
&lt;pre class=&#34;brush: py&#34;&gt;
class Tag(object):
    @staticmethod
    def get_related(tags=[]):
        tag_count = len(tags)
        
        inner_q = select([pagetag_table.c.pageid])
        inner_w = inner_q.where(
            and_(pagetag_table.c.tagid == Tag.id,Tag.name.in_(tags))
        ).group_by(pagetag_table.c.pageid).having(func.count(pagetag_table.c.pageid) == tag_count).correlate(None)
        
        outer_q = select([Tag.id, Tag.name, func.count(pagetag_table.c.shipid)])
        outer_w = outer_q.where(
            and_(pagetag_table.c.pageid.in_(inner_w),
            not_(Tag.name.in_(tags)),
            Tag.id == pagetag_table.c.tagid)
        ).group_by(pagetag_table.c.tagid)
        
        related_tags = meta.Session.execute(outer_w).fetchall()
        return related_tags
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;A big thanks to &lt;a href=&#34;http://cakephp.org/&#34;&gt;PHP-Cake&lt;/a&gt; and &lt;a href=&#34;http://tagschema.com/&#34;&gt;TagSchema&lt;/a&gt; for the ideas, concepts, and implementation examples.&lt;/p&gt;

&lt;p&gt;You can find the actual code that this blog was the basis for at:
&lt;a href=&#34;http://trac.pieceofpy.com/pieceofpy/browser/tags-sqlalchemy&#34;&gt;http://trac.pieceofpy.com/pieceofpy/browser/tags-sqlalchemy&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using SQLAlchemy Custom Types to Convert Integers to DateTime</title>
      <link>http://localhost:1313/sqlalchemy-datetime-integer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/sqlalchemy-datetime-integer/</guid>
      <description>&lt;p&gt;Today I was working on fetching out some data from an existing PostgreSQL server and generating
some BSON output that would later be imported in to MongoDB. One of the problems I ran in to was
that I needed to format the timestamps easily for each row of data.&lt;/p&gt;

&lt;p&gt;Searching the internet I ran across &lt;a href=&#34;http://threebean.wordpress.com/2011/09/01/automatically-converting-integer-timestamps-to-python-datetime-in-reflected-sqlalchemy-models/&#34;&gt;this blog post by Ralph Bean&lt;/a&gt;, which does just that, but at a level
that was well beyond what I needed. So taking away some inspiration from Ralph&amp;rsquo;s blog post, I decided
to just go with a &lt;a href=&#34;http://www.sqlalchemy.org/docs/core/types.html#custom-types&#34;&gt;Custom Type&lt;/a&gt;.&lt;/p&gt;

&lt;pre class=&#34;brush: py&#34;&gt;
from time import mktime
from datetime import datetime

class IntegerDateTime(types.TypeDecorator):
    &#34;&#34;&#34;Used for working with epoch timestamps.

    Converts datetimes into epoch on the way in.
    Converts epoch timestamps to datetimes on the way out.
    &#34;&#34;&#34;
    impl = types.INTEGER
    def process_bind_param(self, value, dialect):
        return mktime(value.timetuple())
    def process_result_value(self, value, dialect):
        return datetime.fromtimestamp(value)
&lt;/pre&gt;

&lt;p&gt;Then in my reflected table, I just override the column that holds the integer representation of the
datetime I want.&lt;/p&gt;

&lt;pre class=&#34;brush: py&#34;&gt;
group_table = sa.Table(&#39;groups&#39;, metadata,
    sa.Column(&#39;register_time&#39;, IntegerDateTime),
    autoload=True,
    include_columns=[
        &#39;group_id&#39;,
    &#39;register_time&#39;,
    &#39;type&#39;
    ],
)
&lt;/pre&gt;

&lt;p&gt;Now when we query and begin to use our results, register_time will be a DateTime object making it
very easy to do any timedelta arithmetic or string formatting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>paster shell - do people know about it?</title>
      <link>http://localhost:1313/pylons-paster-shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/pylons-paster-shell/</guid>
      <description>&lt;p&gt;Today I was having a chat today about Pylons vs. Django and for the most part it was pretty diplomatic. We got to talking about the Admin interface the Django has. Which you don&amp;rsquo;t have to do any extra boiler plate for, it is just there for you. With Pylons you have to use something like FormAlchemy or use Turbogears to get a similar style admin interface for your models and data.&lt;/p&gt;

&lt;p&gt;Since we were sitting at a computer, I went ahead brought up a quick project and did a little demo of the paster shell. Sure, it involves typing and it isn&amp;rsquo;t as pretty or &amp;ldquo;fast&amp;rdquo; as an admin panel, but he didn&amp;rsquo;t even know it existed. One of the common things he mentioned was, &amp;ldquo;if I want to change the menus that are dynamically defined&amp;rdquo; or &amp;ldquo;if a username needs to be changed&amp;rdquo; .. and the application itself doesn&amp;rsquo;t have a custom admin panel, with Pylons he had to do raw SQL.&lt;/p&gt;

&lt;pre&gt;
$paster shell pylons_config.ini

All objects from demo.lib.base are available
Additional Objects:
   mapper     -  Routes mapper object
   wsgiapp    -  This project&#39;s WSGI App instance
   app        -  paste.fixture wrapped around wsgiapp

&amp;gt;&amp;gt;&amp;gt; error_user = meta.Session.query(model.User).filter_by(username=&#39;wwitzel 3&#39;).one()
&amp;gt;&amp;gt;&amp;gt; # nice thing about this, is you also will get exceptions throw if more than one record exists
&amp;gt;&amp;gt;&amp;gt; error_user.username
u&#39;wwitzel 3&#39;
&amp;gt;&amp;gt;&amp;gt; error_user.username = &#39;wwitzel3&#39;
&amp;gt;&amp;gt;&amp;gt; meta.Session.commit()
&amp;gt;&amp;gt;&amp;gt; menu_typo = meta.Session.query(model.Menu).filter_by(id=1).one()
&amp;gt;&amp;gt;&amp;gt; menu_typo.value
u&#39;Abuot&#39;
&amp;gt;&amp;gt;&amp;gt; menu_typo.value = &#39;About&#39;
&amp;gt;&amp;gt;&amp;gt; meta.Session.commit()
&lt;/pre&gt;

&lt;p&gt;So that is a very simple example of how one would use the paster shell to update some bad data in the database while ensuring integrity of your custom model and extension code. After I showed this to my friend he wasn&amp;rsquo;t as concerned about the lack of a web interface for administration within Pylons.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>