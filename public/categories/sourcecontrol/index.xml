<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Sourcecontrol on occasional posts about technology </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://localhost:1313/categories/sourcecontrol/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Blog themes and SCM.</title>
      <link>http://localhost:1313/blog-updates-pt1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog-updates-pt1/</guid>
      <description>&lt;p&gt;We have a new theme? You like? If not, blame commenter rholmes, it is his fault. Seriously though. In a previous post he brought up a very good point, the site looked like hell if you were browsing with images off. Well this new theme looks better with images off and overall it isn&amp;rsquo;t too horribly bad. So, if you don&amp;rsquo;t like it, suggest one, just make sure it looks good with images turned off.&lt;/p&gt;

&lt;p&gt;Now to the SCM part. After about a week of playing with &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; and &lt;a href=&#34;http://lighthouseapp.com/&#34;&gt;Lighthouse&lt;/a&gt;, I found them both to be great products. They integrated well with each other and the tools for working with Git are available under every platform. If I didn&amp;rsquo;t already have my own server and experience deploying &lt;a href=&#34;http://trac.edgewall.org/&#34;&gt;Trac&lt;/a&gt; and &lt;a href=&#34;http://www.selenic.com/mercurial/wiki/&#34;&gt;Mercurial&lt;/a&gt; I would use both these services without question. That being said, though I have enjoyed my time working with those tools, I&amp;rsquo;ve migrated my Github source and Lighthouse tickets over to a newly installed Trac 0.11, full circle.&lt;/p&gt;

&lt;p&gt;End result. If you like tinkering. If you like managing your own installations or you have some customization/integration you would like to do, use Trac and Mercurial, otherwise use Github and one of the great ticket systems it integrates with; I enjoyed Lighthouse.&lt;/p&gt;

&lt;p&gt;For fun, here is the circle of ticketing and scm life I&amp;rsquo;ve gone through over the last 6 years or so.
&lt;ul&gt;
    &lt;li&gt;cvs and PHP Ticket&lt;/li&gt;
    &lt;li&gt;svn and home grown Python tickets&lt;/li&gt;
    &lt;li&gt;svn and Trac&lt;/li&gt;
    &lt;li&gt;Github and Lighthouse&lt;/li&gt;
    &lt;li&gt;mercurial and Trac&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;Have to wonder what is next. A lot of people at work have been asking me why Github or mercurial? Why Wayne? True, that most of the time I am using the repositories for me, myself, and I (De La Soul), but the benefits extend just beyond handling version control for an arbitrary number of developers and clean merges. I&amp;rsquo;ll do a write up soon.&lt;/p&gt;

&lt;p&gt;All the sourcecode for this site is now located at: &lt;a href=&#34;http://trac.pieceopfy.com/pieceofpy&#34;&gt;http://trac.pieceopfy.com/pieceofpy&lt;/a&gt;
I&amp;rsquo;ll be updating all the old links through the other posts to reflect this. Fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I didn&#39;t want those changes anyway.</title>
      <link>http://localhost:1313/scm-hg-mistake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/scm-hg-mistake/</guid>
      <description>

&lt;p&gt;I use hg (&lt;a href=&#34;http://www.selenic.com/mercurial/wiki/&#34;&gt;Mercurial&lt;/a&gt;) for version control. Since switching to hg I have adopted the following process. I also do this for my Git projects at work.
&lt;ul&gt;
    &lt;li&gt;I create a local branch to working.&lt;/li&gt;
    &lt;li&gt;I setup my External Tools in Eclipse to run my test suite.&lt;/li&gt;
    &lt;li&gt;The output of my test suite gets committed to my local branch.&lt;/li&gt;
    &lt;li&gt;I squash the local branch messages when I merge in to master.&lt;/li&gt;
    &lt;li&gt;I add some insightful commit message for my master commit. Like, I haz changes.&lt;/li&gt;
&lt;/ul&gt;
So yesterday, I roll up my sleeves and prepare to dive in to an older project that &lt;a href=&#34;http://en.wikipedia.org/wiki/Code_smell&#34;&gt;smells like rotten potatoes&lt;/a&gt;. The plan of attack is to take this project and bring it up-to-date with Python 2.6, Pylons 0.9.7, and SQLalchemy 0.5.2 in the process of doing it, re-factor and extend where needed, of course letting the tests drive. I start my work and wand waving and 2-3 hours in I&amp;rsquo;ve removed about 200 lines of cruft and copy paste inheritance extended flexibility by further encapsulating some behavior using the Strategy pattern. I&amp;rsquo;ve got 47 tests (including functional doctests) passing and I&amp;rsquo;m green bar and happy with my time spent. So now time to merge this baby back in to master.&lt;/p&gt;

&lt;p&gt;My test suite external tool performs the hg add . and I keep my .hgignore pretty up-to-date for Python projects, so I feel confident doing that. I open up the terminal to check out the change sets and start the merge and I notice I missed a binary format in my .hgignore. So I now have about 15 unwanted files staged for adding. Being lazy and knowing my last commit was when I just ran my test suite, I blindly run.&lt;/p&gt;

&lt;p&gt;[sourcecode lang=&amp;ldquo;bash&amp;rdquo;]
$ ^R hg revert &lt;enter&gt; &lt;enter&gt; (Ctrl-R, hg revert - shell previous command search)
$ hg revert -a &amp;ndash;no-backup&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;&amp;hellip;my work being destroyed because I was lazy and not paying attention&lt;/h1&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;whimpering&lt;/h1&gt;

&lt;p&gt;[/sourcecode]&lt;/p&gt;

&lt;p&gt;It is at this point my day goes from great to awful. I face palm as I watch the uncommitted changes I&amp;rsquo;ve been making over the last 3 hours get reverted. As I mentioned, this project was older, in fact, it was started before the migration to hg and I never updated the External Tools runnable for this project in Eclipse to do the new hg add / commits. So every time I thought I was committing when I was running the tests, I was in fact not. Fortunate for me, I did have some buffers open and was able to recover the end result in about 45 minutes of hacking, but I did lose all of my change history which was very very disappointing (not to mention scary).&lt;/p&gt;

&lt;p&gt;So if I had any advice after this it would be ensure your older projects are up-to-date with how you do things now and they follow your current development process before you start refactoring. I guess the oneliner could be; When refactoring a project start with the tool set first.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>