<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Patterns on occasional posts about technology </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://localhost:1313/categories/patterns/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Blog a day or something... Proxy Pattern!</title>
      <link>http://localhost:1313/python-proxy-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/python-proxy-pattern/</guid>
      <description>&lt;p&gt;Been reading around and I guess November is the official blog entry a day writers month or something. I&amp;rsquo;ll make a go again. In October, I tried the one post a day run for my blog. I did well, but fell short in the end. Though I&amp;rsquo;ve already missed the first two days in November, I&amp;rsquo;ll call that the margin of error.&lt;/p&gt;

&lt;p&gt;Oh and I believe the posts should have some meat to them. Not just another &amp;ldquo;Hey look, a post, I win November.&amp;rdquo; Though as a last resort, I am not above that.&lt;/p&gt;

&lt;p&gt;So for lack of anything better to write about, here is an oldie but goodie. A Python implementation of the proxy pattern (&lt;a href=&#34;http://en.wikipedia.org/wiki/Lazy_loading#Virtual_proxy&#34;&gt;virtual proxy&lt;/a&gt;) with a real worldish feel to it.&lt;/p&gt;

&lt;p&gt;First we define our ABC and subclass it for our needs.
&lt;pre class=&#34;brush: py&#34;&gt;
class File(object):
    def load(self):
        pass&lt;/p&gt;

&lt;p&gt;class RealFile(File):
    def &lt;strong&gt;init&lt;/strong&gt;(self, name):
        self.name = name
        self.load()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    def load(self):
    print &amp;quot;Loading %s...&amp;quot; % (self.name)
def process1(self):
    print &amp;quot;[phase1] Processing %s...&amp;quot; % (self.name)
def process2(self):
    print &amp;quot;[phase2] Processing %s...&amp;quot; % (self.name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Now, we can subclass File for our proxy. Now I know what you are saying. You don&amp;rsquo;t need the extra levels of abstraction because Python doesn&amp;rsquo;t have the levels of type sensitivity of other languages. Could you just implement this in the first RealFile subclass? Yes, but that isn&amp;rsquo;t the point of this. The verbosity helps define the example and keeps this implementation language independent (mostly).&lt;/p&gt;

&lt;pre class=&#34;brush: py&#34;&gt;
class ProxyFile(File):
    def __init__(self, name):
        self.name = name
        self.file = None
        
    def process1(self):
        if not self.file:
            self.file = RealFile(self.name)
        self.file.process1()

    def process2(self):
        if not self.file:
            self.file = RealFile(self.name)
        self.file.process2()
&lt;/pre&gt;

&lt;p&gt;So you can see, this hides away the details of loading the file. Allows the user to call process1 / process2 as the business logic determines and preforms lazy loading. The Proxy pattern is very powerful when combined with other patterns. Like &lt;a href=&#34;http://en.wikipedia.org/wiki/Null_Object_pattern&#34;&gt;Null Object&lt;/a&gt; and Lazy loading.&lt;/p&gt;

&lt;pre class=&#34;brush: py&#34;&gt;
def main():
    f1 = ProxyFile(&#34;bigdb01.csv&#34;)
    f2 = ProxyFile(&#34;bigdb02.csv&#34;)
    f3 = ProxyFile(&#34;bigdb03.csv&#34;)
    
    f1.process1()
    # some busines logic
    f1.process2()
    # more BL
    f2.process2()
    # more BL
    f2.process1()
    # Hey, we found what we needed, skipped f3
    #f3.process()
    
if __name__ == &#39;__main__&#39;:
    main()
&lt;/pre&gt;

&lt;p&gt;You can view full source at: &lt;a href=&#34;http://trac.pieceofpy.com/pieceofpy/browser/patterns/proxy.py&#34;&gt;http://trac.pieceofpy.com/pieceofpy/browser/patterns/proxy.py&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>