<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Python Snippets on occasional posts about technology </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://localhost:1313/tags/python-snippets/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>City and state lookup from zipcode</title>
      <link>http://localhost:1313/python-city-state-lookup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/python-city-state-lookup/</guid>
      <description>&lt;p&gt;We wanted to be able to present the user with an input box for their zip and then determine the city state for that zipcode. We don&amp;rsquo;t care about city aliases we just want to get the proper city name. I was given a file from zip-codes.com and told to make it so. This was going to be rather simple and boring. Part of the requirement was to have a tuple returned that contained city, state, short state, and zip code when doing lookups. The other part was easily handling the infrequent updates. After looking at the &lt;a href=&#34;http://www.zip-codes.com/files/sample_database/zip-codes-database-STANDARD-SAMPLE.zip&#34;&gt;sample data&lt;/a&gt; and determining that their main file is CSV but all of their updates are sent out at Tab delimited. Honestly that made me happy because it was great excuse to use csv.Sniffer. So here is the Django model I ended up with.&lt;/p&gt;

&lt;p&gt;
&lt;pre class=&#34;brush: py&#34;&gt;
from django.db import models
from django.core.exceptions import ObjectDoesNotExist
from csv import Sniffer, DictReader

# Not sold on this name, but couldn&#39;t think of a better one.
class Location(models.Model):
    &#34;&#34;&#34;
    location / zipcode lookup table
    &#34;&#34;&#34;
    
    zipcode = models.CharField(max_length=5, unique=True, db_index=True)
    city = models.CharField(max_length=150)
    state = models.CharField(max_length=150)
    state_abbrv = models.CharField(max_length=2)
    
    @classmethod
    def load(cls, filename):
        &#34;&#34;&#34;
        reads filename, attempts to determine if it is comma or tab delimited
        creates or updates records based on ZipCode and PrimaryRecord key pair
        the following fields must exist in the file: ZipCode, PrimaryRecord,
        CityMixedCase, StateFullName, State
        &#34;&#34;&#34;
        
        csv_fd = open(filename, &#39;r&#39;)
        
        # grab the header for Sniffer
        # reset the position back to the start of the file
        csv_header = csv_fd.readline()
        csv_fd.seek(0)
        
        # determine if we are CSV or Tab delimited
        dialect = Sniffer().sniff(csv_header)
        csv_dict = DictReader(csv_fd, dialect=dialect)
        
        for row in csv_dict:
            if row[&#39;PrimaryRecord&#39;] == &#34;P&#34;:
                zipcode = row[&#39;ZipCode&#39;]
                ZL, created = cls.objects.get_or_create(zipcode=zipcode)
                ZL.zipcode = zipcode
                ZL.city = row[&#39;CityMixedCase&#39;]
                ZL.state = row[&#39;StateFullName&#39;]
                ZL.state_abbrv = row[&#39;State&#39;]
                ZL.save()
                
    @classmethod
    def lookup(cls, zipcode):
        &#34;&#34;&#34;
        given a zipcode will lookup, populate, and return a tuple with
        city, state, zip information else return unavailable and searched zipcode
        &#34;&#34;&#34;
        
        try:
            zl = cls.objects.get(zipcode=zipcode)
            return (zl.city, zl.state, zl.state_abbrv, zipcode)
        except ObjectDoesNotExist:
            return ((&#39;unavailable&#39;,) * 3) + (zipcode,)
&lt;/pre&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick SQLalchemy Shell and Blog Update</title>
      <link>http://localhost:1313/sqlalchemy-shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/sqlalchemy-shell/</guid>
      <description>

&lt;h3 id=&#34;toc_0&#34;&gt;Update&lt;/h3&gt;

&lt;p&gt;So I haven&amp;rsquo;t updated my blog in a long time. Some people actually apparently still check in and read it every now and again.
A few more, even cared enough to asked me why I haven&amp;rsquo;t updated my blog? Embarassed and ashamed I lied and said,
&amp;ldquo;Oh I&amp;rsquo;ve been busy.&amp;rdquo;. Ok, so not so much busy as lazy. I recently switched to Blogofile and in the process I
never setup my version control to re-build and auto publish my commits to the site. Knowing that it wasn&amp;rsquo;t setup I&amp;rsquo;ve been too lazy
to blog because I knew I would have to commit, login, build, and copy the files to the public folder. Yeah seriously, my barrier to
entry for somethings is that low, sue me!&lt;/p&gt;

&lt;p&gt;Anyway, I&amp;rsquo;ve finally got it all setup to do the build and deploy for me and I even managed to setup SSH keys and have it mirror
the changes up to bitbucket for those interested in the source code of this Blogofile blog.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Quick SQLalchemy Shell&lt;/h3&gt;

&lt;p&gt;Ok so now for something I use a lot but took for granted until I used it in front of a friend the other day. Who asked me what? how?
A lot of times when I am working with SQLalchemy I just want a quick shell I can jump in to and start poking around.
I use this a lot of when people ask questions on IRC or the ML. It helps me play around with stuff if I don&amp;rsquo;t know the answer right away.
It is also a great resource for myself when testing new features or trying to figure things out. Nice thing is you can also change it to do
reflection and easily have a session in to a pre-existing table structure, which is nice if you are like me and know SA better than SQL.&lt;/p&gt;

&lt;p&gt;
The structure of the code is pretty simple:
&lt;ul&gt;
    &lt;li&gt;sqla (folder)&lt;/li&gt;
    &lt;ul&gt;
        &lt;li&gt;__main__.py&lt;/li&gt;
        &lt;li&gt;models.py&lt;/li&gt;
    &lt;/ul&gt;
    &lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;brush: py&#34;&gt;
# __main__.py
import os
import sqlalchemy as sa

from models import *

os.environ[&#39;PYTHONINSPECT&#39;] = &#39;True&#39;
engine = sa.create_engine(&#39;sqlite:///:memory&#39;, echo=True)
Base.metadata.create_all(engine)
Session = sa.orm.sessionmaker(bind=engine)
session = Session()
&lt;/pre&gt;    

And then you have models.py
&lt;pre class=&#34;brush: py&#34;&gt;
import sqlalchemy as sa
from sqlalchemy.ext.declarative import declarative_base

__all__ = [&#39;Base&#39;, &#39;Test&#39;]

Base = declarative_base()

class Test(Base):
    __tablename__ = &#39;test&#39;
    id = sa.Column(sa.Integer, primary_key=True)
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
Now you can run something like this, changing your models to have what ever type of objects and relations you desire.
&lt;pre class=&#34;brush: bash&#34;&gt;
(sqla)mac-wwitzel:code wayne.witzel$ python sqla
2011-04-27 14:18:45,764 INFO sqlalchemy.engine.base.Engine.0x...d410 
PRAGMA table_info(&#34;test&#34;)
2011-04-27 14:18:45,764 INFO sqlalchemy.engine.base.Engine.0x...d410 ()
&gt;&gt;&gt; test = Test()
&gt;&gt;&gt; session.add(test)
&gt;&gt;&gt; session.commit()
2011-04-27 14:19:12,011 INFO sqlalchemy.engine.base.Engine.0x...d410 BEGIN (implicit)
2011-04-27 14:19:12,012 INFO sqlalchemy.engine.base.Engine.0x...d410 INSERT INTO test 
DEFAULT VALUES
2011-04-27 14:19:12,012 INFO sqlalchemy.engine.base.Engine.0x...d410 ()
2011-04-27 14:19:12,015 INFO sqlalchemy.engine.base.Engine.0x...d410 COMMIT
&gt;&gt;&gt; t = session.query(Test).first()
2011-04-27 14:19:20,571 INFO sqlalchemy.engine.base.Engine.0x...d410 BEGIN (implicit)
2011-04-27 14:19:20,571 INFO sqlalchemy.engine.base.Engine.0x...d410 SELECT test.id AS 
test_id 
FROM test 
 LIMIT 1 OFFSET 0
2011-04-27 14:19:20,571 INFO sqlalchemy.engine.base.Engine.0x...d410 ()
&gt;&gt;&gt; t
&lt;models.Test object at 0x101643890&gt;
&gt;&gt;&gt;
&lt;/pre&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Random IP Address in Python</title>
      <link>http://localhost:1313/python-random-ip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/python-random-ip/</guid>
      <description>&lt;p&gt;I needed to generate a random IP address for some testing with Google Maps API. Using GeoIP to place a pin when users of a site interact with it. The site is based in the US and will only have US users. I have a list of network ranges from MaxMind in a file. I want to randomly select a network and then randomly select an IP address from that network so the functional testing for the Google Maps and GeoIP integration is a bit more robust. The solution was a nice little algorithm from a &lt;a href=&#34;http://stackoverflow.com/questions/3540288/how-do-i-read-a-random-line-from-one-file-in-python/3540315#3540315&#34;&gt;SO question&lt;/a&gt; and the using the &lt;a href=&#34;http://code.google.com/p/ipaddr-py/&#34;&gt;ipaddr library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;pre class=&#34;brush: py&#34;&gt;
# randomly select a line from the file
import random

def random_line(afile):
    line = next(afile)
    for num, aline in enumerate(afile):
        if random.randrange(num + 2): continue
        line = aline
 return line
&lt;/pre&gt;        
&lt;/p&gt;

&lt;p&gt;Then once I have that line, I feed it in to ipaddr and select a random IP address from the network. This is done using randrange and with the fact the ipaddr supports int casting for IP addresses.&lt;/p&gt;

&lt;p&gt;
&lt;pre class=&#34;brush: py&#34;&gt;    
import ipaddr

network = ipaddr.IPv4Network(random_line(open(&#39;networks.txt&#39;)))
randmon_ip = ipaddr.IPv4Address(random.randrange(int(network.network) + 1,
                                                 int(network.broadcast) - 1))
&lt;/pre&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Response - convert date to epoch</title>
      <link>http://localhost:1313/python-date-epoch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/python-date-epoch/</guid>
      <description>&lt;p&gt;I ran across &lt;a href=&#34;http://sandrotosi.blogspot.com/&#34;&gt;Sandro Tosi&lt;/a&gt;&amp;rsquo;s post about &lt;a href=&#34;http://sandrotosi.blogspot.com/2010/12/convert-date-to-epoch.html&#34;&gt;converting a date to epoch&lt;/a&gt; and for what ever reason blogger wasn&amp;rsquo;t letting me leave comments so I figured I&amp;rsquo;d toss this post up. I just had to do this very same thing in one of my projects.&lt;/p&gt;

&lt;p&gt;
&lt;pre class=&#34;brush: py&#34;&gt;
&gt;&gt;&gt; import time, calendar
&gt;&gt;&gt; ts = time.strptime(&#39;2010-12-01&#39;, &#39;%Y-%m-%d&#39;)
&gt;&gt;&gt; calendar.timegm(ts)
1291161600
&gt;&gt;&gt; ts = time.strptime(&#39;1970-01-01&#39;, &#39;%Y-%m-%d&#39;)
&gt;&gt;&gt; calendar.timegm(ts)
0
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;So there you have it. Thank you calendar module!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Validate All Items in a Sequence</title>
      <link>http://localhost:1313/python-sequence-validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/python-sequence-validation/</guid>
      <description>&lt;p&gt;A co-worker was using all and complained that he couldn&amp;rsquo;t use a lambda so that
the default call to bool() would be done over the return of the lambda which would
so some complex validation and return True or False.&lt;/p&gt;

&lt;p&gt;I thought the obvious solution was to use map with all. Obviously you would replace
the lambda call to your own validation method if you had any advanced or complicated
checking to do. I think this solution works out pretty well.&lt;/p&gt;

&lt;p&gt;
&lt;pre class=&#34;brush: py&#34;&gt;
&gt;&gt;&gt; all(map(lambda x: x&gt;10, xrange(1,20)))
False
&gt;&gt;&gt; all(map(lambda x: x&gt;10, xrange(20,30)))
True
&lt;/pre&gt;        
&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Update&lt;/h3&gt;
My original post sucked, thanks to Peter Ward and Michael Foord for the feedback.
Here is a way to do the same thing using
&lt;a href=&#34;http://docs.python.org/reference/expressions.html#generator-expressions&#34;&gt;generator expressions.&lt;/a&gt;
&lt;p&gt;
&lt;pre class=&#34;brush: py&#34;&gt;
&amp;gt;&amp;gt;&amp;gt; all(x &amp;gt; 10 for x in xrange(1, 20))
False
&amp;gt;&amp;gt;&amp;gt; all(x &amp;gt; 10 for x in xrange(20, 30))
True
&lt;/pre&gt;
&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>